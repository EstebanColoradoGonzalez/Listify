package com.estebancoloradogonzalez.listify.utils

object Queries {
    const val SELECT_USER = "SELECT * FROM user LIMIT 1"
    const val SELECT_BUDGET_ID = "SELECT id FROM budget LIMIT 1"
    const val SELECT_BUDGET = "SELECT * FROM budget LIMIT 1"
    const val SELECT_USER_ID = "SELECT id FROM user LIMIT 1"
    const val UPDATE_USER = "UPDATE user SET name = :newName WHERE id = :userId"
    const val UPDATE_BUDGET = "UPDATE budget SET value = :newBudget WHERE id = :id"
    const val SELECT_CATEGORIES = "SELECT * FROM category"
    const val SELECT_ESTABLISHMENTS = "SELECT * FROM establishment"
    const val SELECT_PURCHASE_FREQUENCY = "SELECT * FROM purchase_frequency"
    const val SELECT_UNIT_OF_MEASUREMENT = "SELECT * FROM unit_of_measurement"
    const val SELECT_STATE = "SELECT * FROM state"
    const val SELECT_CATEGORY_BY_ID = "SELECT * FROM category WHERE id = :id"
    const val SELECT_CATEGORY_BY_NAME = "SELECT * FROM category WHERE name = :name"
    const val SELECT_SHOPPING_LISTS = "SELECT s.id as id, s.shopping_list_date as date, st.name as status FROM shopping_list s JOIN shopping_list_state ss ON s.id = ss.shopping_list JOIN state st ON ss.state = st.id WHERE s.user = :user ORDER BY s.shopping_list_date DESC"
    const val SELECT_LAST_SHOPPING_LIST = "SELECT s.id as id, s.shopping_list_date as date, st.name as status FROM shopping_list s JOIN shopping_list_state ss ON s.id = ss.shopping_list JOIN state st ON ss.state = st.id WHERE s.user = :user ORDER BY shopping_list_date DESC LIMIT 1"
    const val SELECT_SHOPPING_LIST_BY_ID = "SELECT * FROM shopping_list WHERE id = :id"
    const val UPDATE_CATEGORY = "UPDATE category SET name = :newName WHERE id = :id"
    const val UPDATE_SHOPPING_LIST = "UPDATE shopping_list SET shopping_list_date = :newShoppingListDate WHERE id = :id"
    const val DELETE_CATEGORY = "DELETE FROM category WHERE id = :id"
    const val DELETE_SHOPPING_LIST = "DELETE FROM shopping_list WHERE id = :id"
    const val DELETE_ESTABLISHMENTS = "DELETE FROM establishment"
    const val DELETE_PURCHASE_FREQUENCIES = "DELETE FROM purchase_frequency"
    const val DELETE_STATES = "DELETE FROM state"
    const val DELETE_UNITS_OF_MEASUREMENT = "DELETE FROM unit_of_measurement"
    const val UPDATE_AMOUNT = "UPDATE amount SET value = :value WHERE id = :id"
    const val DELETE_AMOUNT = "DELETE FROM amount WHERE id = :id"
    const val SELECT_AMOUNT_BY_ID = "SELECT * FROM amount WHERE id = :id"
    const val SELECT_AMOUNT_UNIT_OF_MEASUREMENT_BY_ID = "SELECT * FROM amount_unit_of_measurement WHERE id = :id"
    const val SELECT_SHOPPING_LIST_STATE_BY_ID = "SELECT * FROM shopping_list_state WHERE id = :id"
    const val SELECT_PRODUCT_SHOPPING_LIST_BY_ID = "SELECT * FROM product_shopping_list WHERE id = :id"
    const val SELECT_AMOUNT_UNIT_OF_MEASUREMENT_BY_AMOUNT = "SELECT * FROM amount_unit_of_measurement WHERE amount = :amount"
    const val SELECT_SHOPPING_LIST_STATE_BY_SHOPPING_LIST = "SELECT * FROM shopping_list_state WHERE shopping_list = :shoppingList"
    const val SELECT_PRODUCT_SHOPPING_LIST_BY_SHOPPING_LIST = "SELECT * FROM product_shopping_list WHERE shopping_list = :shoppingList"
    const val UPDATE_AMOUNT_UNIT_OF_MEASUREMENT_UNIT = "UPDATE amount_unit_of_measurement SET unit_of_measurement = :unitOfMeasurement WHERE id = :id"
    const val UPDATE_SHOPPING_LIST_STATE = "UPDATE shopping_list_state SET state = :state WHERE id = :id"
    const val UPDATE_PRODUCT_SHOPPING_LIST = "UPDATE product_shopping_list SET unit_price = :unitPrice, purchased_amount = :purchasedAmount, is_ready = :isReady WHERE id = :id"
    const val DELETE_PRODUCT_SHOPPING_LIST_BY_ID = "DELETE FROM product_shopping_list WHERE id = :id"
    const val DELETE_AMOUNT_UNIT_OF_MEASUREMENT_BY_ID = "DELETE FROM amount_unit_of_measurement WHERE id = :id"
    const val DELETE_SHOPPING_LIST_STATE_BY_ID = "DELETE FROM shopping_list_state WHERE id = :id"
    const val SELECT_PRODUCT_CATEGORY_BY_ID = "SELECT * FROM product_category WHERE id = :id"
    const val SELECT_PRODUCT_CATEGORY_BY_PRODUCT = "SELECT * FROM product_category WHERE product = :product"
    const val UPDATE_PRODUCT_CATEGORY_CATEGORY = "UPDATE product_category SET category = :category WHERE id = :id"
    const val DELETE_PRODUCT_CATEGORY_BY_ID = "DELETE FROM product_category WHERE id = :id"
    const val SELECT_PRODUCT_BY_ID = "SELECT * FROM product WHERE id = :id"
    const val SELECT_PRODUCT_BY_NAME = "SELECT * FROM product WHERE name = :name"
    const val SELECT_PRODUCT_BY_NAME_TO_UPDATE = "SELECT * FROM product WHERE name = :name AND id <> :productId"
    const val UPDATE_PRODUCT_FIELDS = "UPDATE product SET name = :name, unit_price = :unitPrice, is_active = :isActive WHERE id = :id"
    const val DELETE_PRODUCT_BY_ID = "DELETE FROM product WHERE id = :id"
    const val SELECT_PRODUCT_ESTABLISHMENT_BY_ID = "SELECT * FROM product_establishment WHERE id = :id"
    const val SELECT_PRODUCT_ESTABLISHMENT_BY_PRODUCT = "SELECT * FROM product_establishment WHERE product = :product"
    const val UPDATE_PRODUCT_ESTABLISHMENT_ESTABLISHMENT = "UPDATE product_establishment SET establishment = :establishment WHERE id = :id"
    const val DELETE_PRODUCT_ESTABLISHMENT_BY_ID = "DELETE FROM product_establishment WHERE id = :id"
    const val SELECT_PRODUCT_PURCHASE_FREQUENCY_BY_ID = "SELECT * FROM product_purchase_frequency WHERE id = :id"
    const val SELECT_PRODUCT_PURCHASE_FREQUENCY_BY_PRODUCT = "SELECT * FROM product_purchase_frequency WHERE product = :product"
    const val UPDATE_PRODUCT_PURCHASE_FREQUENCY_FIELD = "UPDATE product_purchase_frequency SET purchase_frequency = :purchaseFrequency WHERE id = :id"
    const val DELETE_PRODUCT_PURCHASE_FREQUENCY_BY_ID = "DELETE FROM product_purchase_frequency WHERE id = :id"
    const val SELECT_UNIT_OF_MEASUREMENT_BY_NAME = "SELECT * FROM unit_of_measurement WHERE name = :name"
    const val SELECT_UNIT_OF_MEASUREMENT_BY_ID = "SELECT * FROM unit_of_measurement WHERE id = :id"
    const val SELECT_PURCHASE_FREQUENCY_BY_NAME = "SELECT * FROM purchase_frequency WHERE name = :name"
    const val SELECT_ESTABLISHMENT_BY_NAME = "SELECT * FROM establishment WHERE name = :name"
    const val SELECT_STATE_BY_NAME = "SELECT * FROM state WHERE name = :name"
    const val SELECT_PRODUCTS_DTO = "SELECT p.id AS id, p.name AS name, p.unit_price AS unitPrice, u.symbol AS unitSymbol FROM product p INNER JOIN amount_unit_of_measurement aum ON p.amount = aum.amount INNER JOIN unit_of_measurement u ON aum.unit_of_measurement = u.id WHERE p.user = :user"
    const val SELECT_PRODUCT_TO_UPDATE_DTO = "SELECT p.id AS id, p.name AS name, p.unit_price AS unitPrice, a.value AS amount, u.name AS unitOfMeasurement, pf.name AS purchaseFrequency, e.name AS establishment, c.name AS category, p.is_active AS isActive FROM product p JOIN amount a ON p.amount = a.id JOIN amount_unit_of_measurement aum ON p.amount = aum.amount JOIN unit_of_measurement u ON aum.unit_of_measurement = u.id JOIN product_purchase_frequency ppf ON p.id = ppf.product JOIN purchase_frequency pf ON ppf.purchase_frequency = pf.id JOIN product_establishment pe ON p.id = pe.product JOIN establishment e ON pe.establishment = e.id JOIN product_category pc ON p.id = pc.product JOIN category c ON pc.category = c.id WHERE p.id = :id"
    const val SELECT_TOTAL_EXPENDITURE = "SELECT SUM(p.unit_price * a.value) FROM product as p INNER JOIN amount as a ON p.amount = a.id WHERE p.is_active = 1"
    const val SELECT_USER_EXCEED_BUDGET_TO_CREATE = "SELECT CASE WHEN COALESCE(SUM(p.unit_price * a.value), 0) + :additionalCost > b.value THEN 1 ELSE 0 END as exceedsBudget FROM product as p INNER JOIN amount as a ON p.amount = a.id INNER JOIN user as u ON p.user = u.id INNER JOIN budget as b ON u.budget = b.id WHERE u.id = :userId AND p.is_active = 1"
    const val SELECT_USER_EXCEED_BUDGET_TO_UPDATE = "SELECT CASE WHEN COALESCE(SUM(p.unit_price * a.value), 0) + :additionalCost > b.value THEN 1 ELSE 0 END as exceedsBudget FROM product as p INNER JOIN amount as a ON p.amount = a.id INNER JOIN user as u ON p.user = u.id INNER JOIN budget as b ON u.budget = b.id WHERE u.id = :userId AND p.is_active = 1 AND p.id <> :productId"
    const val SELECT_PRODUCTS_TO_ANALYZE = "SELECT psl.id AS id, p.name AS name, psl.unit_price AS unitPrice, a.value AS amount, uom.name AS unitOfMeasurement, (psl.unit_price * a.value) AS totalPrice, pf.name AS purchaseFrequency, e.name AS establishment, c.name AS category, p.registration_date AS registrationDate FROM product_shopping_list AS psl INNER JOIN product AS p ON p.id = psl.product INNER JOIN amount AS a ON a.id = p.amount INNER JOIN amount_unit_of_measurement AS auom ON auom.amount = a.id INNER JOIN unit_of_measurement AS uom ON uom.id = auom.unit_of_measurement LEFT JOIN product_purchase_frequency AS ppf ON ppf.product = p.id LEFT JOIN purchase_frequency AS pf ON pf.id = ppf.purchase_frequency LEFT JOIN product_establishment AS pe ON pe.product = p.id LEFT JOIN establishment AS e ON e.id = pe.establishment LEFT JOIN product_category AS pc ON pc.product = p.id LEFT JOIN category AS c ON c.id = pc.category WHERE psl.shopping_list = :shoppingList"
    const val SELECT_ALL_PRODUCTS_TO_ANALYZE = "SELECT p.id AS id, p.name AS name, p.unit_price AS unitPrice, a.value AS amount, uom.name AS unitOfMeasurement, (p.unit_price * a.value) AS totalPrice, pf.name AS purchaseFrequency, e.name AS establishment, c.name AS category, p.registration_date AS registrationDate FROM product p INNER JOIN amount a ON p.amount = a.id INNER JOIN amount_unit_of_measurement a_uom ON a_uom.amount = a.id INNER JOIN unit_of_measurement uom ON a_uom.unit_of_measurement = uom.id LEFT JOIN product_purchase_frequency ppf ON ppf.product = p.id LEFT JOIN purchase_frequency pf ON ppf.purchase_frequency = pf.id LEFT JOIN product_establishment pe ON pe.product = p.id LEFT JOIN establishment e ON pe.establishment = e.id LEFT JOIN product_category pc ON pc.product = p.id LEFT JOIN category c ON pc.category = c.id WHERE p.user = :user AND p.is_active = 1"
    const val SELECT_MOST_RECENT_SHOPPING_LIST_DATE = "SELECT MAX(shopping_list_date) FROM shopping_list WHERE user = :user"
    const val GET_ESTABLISHMENTS_FOR_SHOPPING_LIST = "SELECT DISTINCT e.name FROM product_shopping_list AS psl INNER JOIN product_establishment AS pe ON psl.product = pe.product INNER JOIN establishment AS e ON pe.establishment = e.id WHERE psl.shopping_list = :shoppingListId"
    const val GET_PRODUCTS_BY_SHOPPING_LIST_AND_ESTABLISHMENT = "SELECT psl.id AS productShoppingListId, p.name AS productName, a.value AS amountValue, uom.symbol AS unitSymbol, psl.unit_price AS unitPrice, psl.is_ready AS isReady FROM product_shopping_list AS psl INNER JOIN product AS p ON psl.product = p.id INNER JOIN amount AS a ON p.amount = a.id INNER JOIN amount_unit_of_measurement AS aum ON a.id = aum.amount INNER JOIN unit_of_measurement AS uom ON aum.unit_of_measurement = uom.id INNER JOIN product_establishment AS pe ON p.id = pe.product INNER JOIN establishment AS e ON pe.establishment = e.id WHERE psl.shopping_list = :shoppingListId AND e.name = :establishmentName"
    const val UPDATE_IS_READY_BY_ID = "UPDATE product_shopping_list SET is_ready = :isReady WHERE id = :productShoppingListId"
}