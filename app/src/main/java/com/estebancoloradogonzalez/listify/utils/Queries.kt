package com.estebancoloradogonzalez.listify.utils

object Queries {
    const val SELECT_USER = "SELECT * FROM user LIMIT 1"
    const val SELECT_BUDGET_ID = "SELECT id FROM budget LIMIT 1"
    const val SELECT_BUDGET = "SELECT * FROM budget LIMIT 1"
    const val SELECT_USER_ID = "SELECT id FROM user LIMIT 1"
    const val UPDATE_USER = "UPDATE user SET name = :newName WHERE id = :userId"
    const val UPDATE_BUDGET = "UPDATE budget SET value = :newBudget WHERE id = :id"
    const val SELECT_CATEGORIES = "SELECT * FROM category"
    const val SELECT_ESTABLISHMENTS = "SELECT * FROM establishment"
    const val SELECT_PURCHASE_FREQUENCY = "SELECT * FROM purchase_frequency"
    const val SELECT_UNIT_OF_MEASUREMENT = "SELECT * FROM unit_of_measurement"
    const val SELECT_STATE = "SELECT * FROM state"
    const val SELECT_CATEGORY_BY_ID = "SELECT * FROM category WHERE id = :id"
    const val SELECT_CATEGORY_BY_NAME = "SELECT * FROM category WHERE name = :name"
    const val UPDATE_CATEGORY = "UPDATE category SET name = :newName WHERE id = :id"
    const val DELETE_CATEGORY = "DELETE FROM category WHERE id = :id"
    const val DELETE_ESTABLISHMENTS = "DELETE FROM establishment"
    const val DELETE_PURCHASE_FREQUENCIES = "DELETE FROM purchase_frequency"
    const val DELETE_STATES = "DELETE FROM state"
    const val DELETE_UNITS_OF_MEASUREMENT = "DELETE FROM unit_of_measurement"
    const val UPDATE_AMOUNT = "UPDATE amount SET value = :value WHERE id = :id"
    const val DELETE_AMOUNT = "DELETE FROM amount WHERE id = :id"
    const val SELECT_AMOUNT_BY_ID = "SELECT * FROM amount WHERE id = :id"
    const val SELECT_AMOUNT_UNIT_OF_MEASUREMENT_BY_ID = "SELECT * FROM amount_unit_of_measurement WHERE id = :id"
    const val SELECT_AMOUNT_UNIT_OF_MEASUREMENT_BY_AMOUNT = "SELECT * FROM amount_unit_of_measurement WHERE amount = :amount"
    const val UPDATE_AMOUNT_UNIT_OF_MEASUREMENT_UNIT = "UPDATE amount_unit_of_measurement SET unit_of_measurement = :unitOfMeasurement WHERE id = :id"
    const val DELETE_AMOUNT_UNIT_OF_MEASUREMENT_BY_ID = "DELETE FROM amount_unit_of_measurement WHERE id = :id"
    const val SELECT_PRODUCT_CATEGORY_BY_ID = "SELECT * FROM product_category WHERE id = :id"
    const val SELECT_PRODUCT_CATEGORY_BY_PRODUCT = "SELECT * FROM product_category WHERE product = :product"
    const val UPDATE_PRODUCT_CATEGORY_CATEGORY = "UPDATE product_category SET category = :category WHERE id = :id"
    const val DELETE_PRODUCT_CATEGORY_BY_ID = "DELETE FROM product_category WHERE id = :id"
    const val SELECT_PRODUCT_BY_ID = "SELECT * FROM product WHERE id = :id"
    const val SELECT_PRODUCT_BY_NAME = "SELECT * FROM product WHERE name = :name"
    const val SELECT_PRODUCT_BY_NAME_TO_UPDATE = "SELECT * FROM product WHERE name = :name AND id <> :productId"
    const val UPDATE_PRODUCT_FIELDS = "UPDATE product SET name = :name, unit_price = :unitPrice, is_active = :isActive WHERE id = :id"
    const val DELETE_PRODUCT_BY_ID = "DELETE FROM product WHERE id = :id"
    const val SELECT_PRODUCT_ESTABLISHMENT_BY_ID = "SELECT * FROM product_establishment WHERE id = :id"
    const val SELECT_PRODUCT_ESTABLISHMENT_BY_PRODUCT = "SELECT * FROM product_establishment WHERE product = :product"
    const val UPDATE_PRODUCT_ESTABLISHMENT_ESTABLISHMENT = "UPDATE product_establishment SET establishment = :establishment WHERE id = :id"
    const val DELETE_PRODUCT_ESTABLISHMENT_BY_ID = "DELETE FROM product_establishment WHERE id = :id"
    const val SELECT_PRODUCT_PURCHASE_FREQUENCY_BY_ID = "SELECT * FROM product_purchase_frequency WHERE id = :id"
    const val SELECT_PRODUCT_PURCHASE_FREQUENCY_BY_PRODUCT = "SELECT * FROM product_purchase_frequency WHERE product = :product"
    const val UPDATE_PRODUCT_PURCHASE_FREQUENCY_FIELD = "UPDATE product_purchase_frequency SET purchase_frequency = :purchaseFrequency WHERE id = :id"
    const val DELETE_PRODUCT_PURCHASE_FREQUENCY_BY_ID = "DELETE FROM product_purchase_frequency WHERE id = :id"
    const val SELECT_UNIT_OF_MEASUREMENT_BY_NAME = "SELECT * FROM unit_of_measurement WHERE name = :name"
    const val SELECT_UNIT_OF_MEASUREMENT_BY_ID = "SELECT * FROM unit_of_measurement WHERE id = :id"
    const val SELECT_PURCHASE_FREQUENCY_BY_NAME = "SELECT * FROM purchase_frequency WHERE name = :name"
    const val SELECT_ESTABLISHMENT_BY_NAME = "SELECT * FROM establishment WHERE name = :name"
    const val SELECT_STATE_BY_NAME = "SELECT * FROM state WHERE name = :name"
    const val SELECT_PRODUCTS_DTO = "SELECT p.id AS id, p.name AS name, p.unit_price AS unitPrice, u.symbol AS unitSymbol FROM product p INNER JOIN amount_unit_of_measurement aum ON p.amount = aum.amount INNER JOIN unit_of_measurement u ON aum.unit_of_measurement = u.id WHERE p.user = :user"
    const val SELECT_PRODUCT_TO_UPDATE_DTO = "SELECT p.id AS id, p.name AS name, p.unit_price AS unitPrice, a.value AS amount, u.name AS unitOfMeasurement, pf.name AS purchaseFrequency, e.name AS establishment, c.name AS category, p.is_active AS isActive FROM product p JOIN amount a ON p.amount = a.id JOIN amount_unit_of_measurement aum ON p.amount = aum.amount JOIN unit_of_measurement u ON aum.unit_of_measurement = u.id JOIN product_purchase_frequency ppf ON p.id = ppf.product JOIN purchase_frequency pf ON ppf.purchase_frequency = pf.id JOIN product_establishment pe ON p.id = pe.product JOIN establishment e ON pe.establishment = e.id JOIN product_category pc ON p.id = pc.product JOIN category c ON pc.category = c.id WHERE p.id = :id"
    const val SELECT_TOTAL_EXPENDITURE = "SELECT SUM(p.unit_price * a.value) FROM product as p INNER JOIN amount as a ON p.amount = a.id WHERE p.is_active = 1"
    const val SELECT_USER_EXCEED_BUDGET_TO_CREATE = "SELECT CASE WHEN COALESCE(SUM(p.unit_price * a.value), 0) + :additionalCost > b.value THEN 1 ELSE 0 END as exceedsBudget FROM product as p INNER JOIN amount as a ON p.amount = a.id INNER JOIN user as u ON p.user = u.id INNER JOIN budget as b ON u.budget = b.id WHERE u.id = :userId AND p.is_active = 1"
    const val SELECT_USER_EXCEED_BUDGET_TO_UPDATE = "SELECT CASE WHEN COALESCE(SUM(p.unit_price * a.value), 0) + :additionalCost > b.value THEN 1 ELSE 0 END as exceedsBudget FROM product as p INNER JOIN amount as a ON p.amount = a.id INNER JOIN user as u ON p.user = u.id INNER JOIN budget as b ON u.budget = b.id WHERE u.id = :userId AND p.is_active = 1 AND p.id <> :productId"
}